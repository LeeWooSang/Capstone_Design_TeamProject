안녕하세요 FREEZE BOMB 중간 발표 시작하겠습니다.

저희 팀은 사명진,이우상,염혜린 팀으로 구성되어 있습니다.

(목차)
목차는 다음과 같습니다.

저희 게임의 주요 컨셉은 술래는 제한 시간내의 폭탄을 넘겨야 되고 도망자들은 
술래를 피하면서 다른 도망자들의 얼음을 깨고 술래의 타겟을 자신이 아닌 다른 플레이어로 
돌리게 만드는 게임입니다.

조작법은 그림과 같습니다.

(기술적 요소)
특히 이번 졸업작품을 진행하는 내내 Git으로 다른 팀원들과 코드 공유 및 충돌해결 등을 해보면서 
Git 활용 능력이 그 전보다 많이 좋아졌습니다.

(역할 분담)
저희팀에서 저와 이우상 학우가 클라이언트를 담당하였고 염혜린 학우가 서버를 맡았습니다.

현재 여기 개발 내용은 지금까지 진행한것을 표로 나타내 봤습니다.

(문제점)
저희는 아직 1라운드만 구성해놓은 상태입니다. 
최종 발표때 1라운드 종료시 다음 라운드가 진행되게 구현할 예정입니다.



(개발 일정)
개발일정은 현재까지 클라이언트는 1월에는  리소스 수집 및 애니메이션을 중점으로 하였습니다.
방학동안 애니메이션을 목표로 했었는데 예상보다 빨리 됬기때문에
계획했던 것 이외의 다른 것 들을 구현 할 수 있었습니다.

3월 개강 후 부터는 다이렉트 2D를 이용해 텍스트를 렌더링 할 수 있게 했습니다.

또한 UI작업은 2월 부터 꾸준하게 5월까지 해왔으며 

이우상 학우가 클라이언트 최적화도 진행해 주었습니다.

서버는 이전까지 서버 한 일
서버프레임워크 제작, 
서버에서 DirectX 라이브러리를 활용한  
클라이언트 간 이동 ,회전 구현, 캐릭터 정보를 받아 . Lock을 사용하여 간단한 상호배제 구현.

이후 서버에서 충돌판단 및 애니메이션 동기화, 
지연시간을 고려하여 클라이언트간의 상호작용을 세밀하게 동기화.
데드레커닝 방식으로 네트워크 최적화를 할 예정입니다.

다음으로 게임 시연을 하겠습니다.

클라이언트를 실행하면 로딩화면이 보여지며 내부적으로는 리소스들을 로드하며 로딩 진행상황을

유저에게 프로그래스바로 알려줄수 있습니다.

로딩이 완료되면 캐릭터 선택창으로 바뀝니다.

캐릭터 선택화면에서 원하는 캐릭터를 선택하면 해당 캐릭터로 게임을 시작하게 됩니다.

화면 상단에 보이는것은 현재 남은 시간을 알려주는 UI입니다.

또한 우측 아래쪽에 보이는 파란 네모는 일반 아이템 UI 이고 노란 네모는 특수아이템 UI입니다.


화살표 앞 뒤 옆 키로 이동 회전이 가능합니다.

적 캐릭터와 일정 거리가 되면 적 캐릭터가 누군지 확인할 수 있게 

적 캐릭터 위에 플레이어 아이디를 표시하였습니다.

먼저 도망자로 플레이 해 보겠습니다.

도망자는 얼음으로 바뀔 수 있고 얼음 상태일 때는 회전은 가능하나 이동은 하지 못합니다.

얼음을 풀고 월드를 돌아다니며 아이템을 얻어보겠습니다.

(일반 망치를 먹는다) 
현재 망치를 먹고 공격키를 누르면 망치를 휘두르는 동시에 망치 효과음이 납니다.

월드에있는 얼음 상태의 적 캐릭터에게 가서 얼음을 깨보겠습니다.

이렇게 적 캐릭터를 때리면 카메라가 흔들리고 

얼음 파티클이 터져나오게 됩니다.

이번에는 술래가 되어 보겠습니다.

술래가 되면 플레이어는 폭탄을 들고 있게 되고  

이 폭탄을 들고 또 다른 얼음 상태의 적에게 가까이 다가가면

폭탄이 넘어가지 않습니다.

얼음이 아닌 캐릭터를 찾아 폭탄을 넘겨보겠습니다.

적이 얼음 상태가 아니라면 적 캐릭터에게 폭탄이 넘어가게 됩니다.

이 폭탄은 쿨타임이 적용되서 
넘기고 난 다음 3초 정도가 지나야 다시 다른 플레이어에게 넘길 수 있습니다.


시간이 10초 남짓 남게 되면 경고음이 울리게 됩니다.

만약 술래가 타이머 아이템을 갖고 있다면 

타이머 아이템을 적용해 제한시간을 늘릴 수 있습니다.

이렇게 사용하고 나면 경고음은 멈추고 술래는 게임을 연장할 수 있게 됩니다..

현재 게임 진행상황을 알아보겠습니다.

플레이어는 TAB키를 누르면 스코어 보드를 확인할 수 있습니다.

또 엔터키를 누르면 채팅모드가 되어 텍스트를 실시간으로 입력하고 화면에서 

자신이 치고 있는 타자를 실시간으로 확인할 수 있습니다.

마지막으로 시간이 다 되면 폭탄은 터지고 플레이어는 죽으며 

게임 결과를 보여주게 됩니다.



예상 질문 :

1. FBX를 직접 불러오는지 ?

fbx라이브러리를 직접 임포트해서 사용하면 프로그램이 무거워지고,
로드시간이 길어지기때문에 우리가 사용할 데이터만 바이너리 파일로 만들어서 로드합니다.
 

2. 그럼 바이너리는 어떻게 쓴건지?

겨울방학때 이용희 교수님에 FBX특강을 들으면서 교수님께서 FBX 라이브러리를 활용해 모델을 IMPORT하는 방식과

유니티와 같은 엔진을 이용해 모델의 정보를 파일로 익스포트 하는 방법을 알려주셨습니다.

저희는 모델의 정보를 바이너리 파일로 익스포트 한 다음 그 파일을 읽어 모델의 정보를 얻어왔습니다.
 

3.애니메이션에 대해서 설명해봐라

애니메이션의 정의는 어떤 시각에 대하여 프레임 계ㅖ층 구조의 프레임들을 변환한것입니다.
일단 저희 모델의 스킨 메쉬는 한개이고 그 스킨 메쉬는 루트 프레임에 저장되어 있습니다.

애니메이션에서 필요한 행렬은 두 개입니다.
본오프셋 행렬과 루트 변환 행렬입니다.

또한 본오프셋 행렬은 T-포즈 상태의 모델에서 루트 프레임에 위치한
스킨메쉬의 정점이 몇번 프레임을 얼마만큼 따라가느냐를 정하는 행렬입니다.

저희는 각 정점이 최대 4개의 프레임의 영향을 받게 했으며 
영향을 받는 정도는 각 정점의 가중치를 이용합니다.

또한 본오프셋 행렬로 스킨메쉬가 어느 프레임을 어느정도 따라간다는 정보가 있다면
이제는 루트 변환행렬을 이용해 월드상의 위치시킵니다.

만약 모델이 동일하지만 월드 상의 놓인 위치가 다르다면

본오프셋행렬은 동일하지만 TORoot행렬은 달라야합니다.
  

4.정적인 오브젝트 의 개수 377개  -- 메쉬 수 100~300개 정도 (ex 사슴 1200개)

  아이템 수 21

 Evilbear 메쉬 801개




5.모델들은 어떤 매핑을 적용했는지?

우선 기본적인 캐릭터들은 디퓨즈맵만 적용했다.

얼음 상태의 재질같은경우 디퓨즈 맵,Glosssiness와 노멀맵, 그리고 디테일 디퓨즈 맵, 디테일 노멀맵을 적용했습니다.

정적인 오브젝트는 디퓨즈 맵, 메탈릭 그리고 노멀매핑이 되어있다.

사슴은 디퓨즈와 스펙큘러

그리고 울타리같은 경우는 텍스쳐없이 디퓨즈 색상으로만 되어있습니다.


